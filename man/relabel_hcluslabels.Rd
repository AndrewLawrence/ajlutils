% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hierarchical_cluster_relabelling.R
\name{relabel_hcluslabels}
\alias{relabel_hcluslabels}
\title{relabel_hcluslabels}
\usage{
relabel_hcluslabels(x)
}
\arguments{
\item{x}{matrix of clustering labels organised with subjects as rows,
k-solutions as columns with increasing complexity solutions
from left to right.}
}
\description{
Function to relabel hierarchical clustering results
}
\details{
Clustering algorithms that accept a parameter k for the exact number of
 clusters to estimate will naturally return a variable number of clusters
 depending on the parameter value.

 Clusters labels are typically assigned arbitrarily by clustering algorithms
 To illustrate, assigning 4 clusters to 10 patients in the following ways
 is equivalent as we can map the labels A -> B, B -> C, C -> A, and D -> D to
 obtain the same result:


    A, A, A, B, C, C, C, C, D, D


    C, C, C, A, B, B, B, B, D, D

 Given this setting, when evaluating results for a clustering algorithm at
 different values of k we don't want the labels to vary drastically
 from (e.g.) k=2 to k=3 rather we want the cluster in k=3 which
 most resembles cluster "A" in k=2 to be labelled "A" and not "B" or "C".
 But this behaviour is not possible given only the input to the clustering
 algorithm. Note: this is only useful if there is continuity between
 clusterings at successive k values. It will not be useful if clusterings
 are at random. In real data the two clusters found at k=2 rarely split
 at random into the 3 clusters at k=3.

 To illustrate, in the scenario:

  k=2: A A A B B B B B B

  k=3: B B B A A A A C C

  we would prefer to adjust k=3 labels such that:

  k=2: A A A B B B B B B

  k=3: A A A B B B B C C

 The relabelling makes it easier to see that:

    1) The "A" class is preserved from k=2 solution to the k=3 solution

    2) The "B" class splits into two clusters "B" and "C"

 Without the relabelling the analyst must recall that "B" in k=3 was labelled
 "A" in the k=2 solution, which adds cognitive load to interpretation.

 This function implements a simple greedy algorithm to relabel clusters in a
 cascading manner from left to right.
}
