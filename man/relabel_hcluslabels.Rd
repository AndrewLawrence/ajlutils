% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hierarchical_cluster_relabelling.R
\name{relabel_hcluslabels}
\alias{relabel_hcluslabels}
\title{relabel_hcluslabels}
\usage{
relabel_hcluslabels(x)
}
\arguments{
\item{x}{matrix of clustering labels organised with subjects as rows,
k-solutions as columns. Must be ordered with increasing complexity
of solutions from left to right.}
}
\value{
a matrix of class hcluslabels containing relabelled clusters from x
}
\description{
Function to harmonise labels for clustering results on the same sample
     with increasing number of partitions - termed hierarchical clustering.
     For pairwise relabelling and non-hierarchical label matching
     (i.e. k1 == k2), see \code{\link{lsap_relabel_pair}}.
}
\details{
Clustering algorithms that accept a parameter k for the exact number of
 clusters to estimate will naturally return a variable number of clusters
 depending on that parameter value. Each increase in k produces a new label
 and some subjects will be assigned to the new label.

 In addition to this, cluster labels are (commonly) assigned arbitrarily
 such that even when the exact same cluster structure is identified,
 which cluster is labelled as "A" vs. "B" is arbitrary. To illustrate, the
 following two clusterings of 10 patients into 4 clusters A,...,D is
 equivalent:


    A, A, A, B, C, C, C, C, D, D


    C, C, C, A, B, B, B, B, D, D

 If we map the labels A -> B, B -> C, C -> A, and D -> D the two labellings
 are identical.

 Given this setting, when evaluating results for a clustering algorithm at
 different values of k we don't want the assignment of labels to vary
 drastically from (e.g.) k=2 to k=3. Rather we want the cluster in k=3 which
 most resembles cluster "A" in k=2 to be labelled "A" (and not "B" or "C").

 Note: this assumes a degree of continuity between
 clusterings at successive k values. It will not be useful if clusterings
 are at random. However in real data the two clusters found at k=2 rarely
 split at random into the 3 clusters at k=3 and it is more typical to have
 one of the k=2 labels split more into the new cluster.

 To illustrate, in the scenario:

  k=2: A A A B B B B B B

  k=3: B B B A A A A C C

  we would prefer to adjust k=3 labels such that:

  k=2: A A A B B B B B B

  k=3: A A A B B B B C C

 The relabelling makes it easier to see that:

    1) The "A" class is preserved from k=2 solution to the k=3 solution

    2) The "B" class splits into two clusters "B" and "C"

 Without the relabelling the analyst needs to recall that "B" in k=3 was
 labelled "A" in the k=2 solution, which adds cognitive load to
 interpretation.

 This function uses the \code{\link[clue]{solve_LSAP}} function from the
     clue package. See Hornik 2005 J. Stat. Software
     (\url{https://www.jstatsoft.org/article/view/v014i12})
}
\examples{
# Make some example data:
mat <- cbind(rep(c("A"), times = c(30)),
            rep(c("A","B"), times = c(10,20)),
            rep(c("C","B","A"), times = c(10,10,10)))
# Show that labels do not line up well:
#   most labelled A at k=1 are labelled B at k=2:
table(mat[,2], mat[,1], dnn = c("k=2", "k=1"))
#   the k=3 labels are jumbled:
table(mat[,3], mat[,2], dnn = c("k=3", "k=2"))

# Apply the reordering:
rmat <- relabel_hcluslabels(mat)

# inspect the remapping of labels:
attr(rmat, "mapping")

# view the data:
rmat

}
